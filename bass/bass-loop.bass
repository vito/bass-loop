; memoize dependency resolution
(def *memos* *dir*/bass.lock)

(use (.git (linux/alpine/git))
     (git:github/vito/tabs/ref/main/nix.bass))

; go caching
(defn with-go [thunk]
  (-> thunk
      (with-env {:GOBIN "/bin"}) ; install things into $PATH
      (with-mount (cache-dir "bass-loop/gopath") /go/pkg/mod/)
      (with-mount (cache-dir "bass-loop/gocache") /root/.cache/go-build/)))

(defn mod-version [src mod]
  (-> ($ rg -r "$1" -o (str mod " v(.*)") src/go.mod)
      (with-image (nix:linux/ripgrep :flake src))
      (read :unix-table)
      next
      first))

; returns a path to a bass-loop compiled binary
(defn build [src]
  (def bud-version
    (mod-version src "github.com/livebud/bud"))

  (subpath
    (from (nix:linux/shell/go/gcc/git/yarn/gnumake :flake src)
      (cd src/
        ; NB: the officially released bud binaries are not statically linked
        ; and don't work in Nix so just just compile it in a way identical to
        ; the released binary until bud is added to nixpkgs
        (with-go
          ($ go install -trimpath
             --ldflags (str "-X github.com/livebud/bud/internal/versions.Bud=" bud-version)
             "github.com/livebud/bud"))

        ; pull in bud dependencies
        ($ yarn)

        ; build ./bud/app
        (with-go ($ bud build))))
    ./bud/app))

; the canonical image for running bass-loop
(defn image [src]
  (-> (from (nix:linux/busybox :flake src)
        ($ cp (build src) /usr/bin/bass-loop))
      (with-port :http 3000)
      (with-port :ssh 6455)
      (with-entrypoint ["bass-loop" "--listen" "0.0.0.0:3000"])))

; returns a thunk that runs the bass-loop server
(defn server [src]
  (image src))

; returns a thunk that runs Caddy proxied to the given server
(defn https-server [src server caddyfile]
  (from (nix:linux/go_1_20 :flake src)
    (with-go ($ go install "github.com/caddyserver/xcaddy/cmd/xcaddy@v0.3.0"))
    (with-go ($ xcaddy build --with "github.com/caddy-dns/cloudflare" --output /bin/caddy))
    (-> ($ caddy run)
        (with-mount caddyfile ./Caddyfile)
        (with-env {:PROXY_ADDR (addr server :http)}))))
